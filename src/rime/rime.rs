#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

/* automatically generated by rust-bindgen */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const False: u32 = 0;
pub const True: u32 = 1;
pub const RIME_MAX_NUM_CANDIDATES: u32 = 10;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type RimeSessionId = usize;
pub type Bool = ::std::os::raw::c_int;
#[doc = "! Rime traits structure"]
#[doc = "*!"]
#[doc = "*  Should be initialized by calling RIME_STRUCT_INIT(Type, var)"]
#[doc = "*/"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_traits_t {
    pub data_size: ::std::os::raw::c_int,
    pub shared_data_dir: *const ::std::os::raw::c_char,
    pub user_data_dir: *const ::std::os::raw::c_char,
    pub distribution_name: *const ::std::os::raw::c_char,
    pub distribution_code_name: *const ::std::os::raw::c_char,
    pub distribution_version: *const ::std::os::raw::c_char,
    #[doc = " Pass a C-string constant in the format \"rime.x\""]
    #[doc = " where 'x' is the name of your application."]
    #[doc = " Add prefix \"rime.\" to ensure old log files are automatically cleaned."]
    pub app_name: *const ::std::os::raw::c_char,
    #[doc = "! A list of modules to load before initializing"]
    pub modules: *mut *const ::std::os::raw::c_char,
    #[doc = " Minimal level of logged messages."]
    #[doc = "  Value is passed to Glog library using FLAGS_minloglevel variable."]
    #[doc = "  0 = INFO (default), 1 = WARNING, 2 = ERROR, 3 = FATAL"]
    pub min_log_level: ::std::os::raw::c_int,
    #[doc = " Directory of log files."]
    #[doc = "  Value is passed to Glog library using FLAGS_log_dir variable."]
    pub log_dir: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rime_traits_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_traits_t>(),
        80usize,
        concat!("Size of: ", stringify!(rime_traits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_traits_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_traits_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_traits_t>())).data_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_traits_t>())).shared_data_dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(shared_data_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_traits_t>())).user_data_dir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(user_data_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_traits_t>())).distribution_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(distribution_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_traits_t>())).distribution_code_name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(distribution_code_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_traits_t>())).distribution_version as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(distribution_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_traits_t>())).app_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(app_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_traits_t>())).modules as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(modules)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_traits_t>())).min_log_level as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(min_log_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_traits_t>())).log_dir as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_traits_t),
            "::",
            stringify!(log_dir)
        )
    );
}
#[doc = "! Rime traits structure"]
#[doc = "*!"]
#[doc = "*  Should be initialized by calling RIME_STRUCT_INIT(Type, var)"]
#[doc = "*/"]
pub type RimeTraits = rime_traits_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RimeComposition {
    pub length: ::std::os::raw::c_int,
    pub cursor_pos: ::std::os::raw::c_int,
    pub sel_start: ::std::os::raw::c_int,
    pub sel_end: ::std::os::raw::c_int,
    pub preedit: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RimeComposition() {
    assert_eq!(
        ::std::mem::size_of::<RimeComposition>(),
        24usize,
        concat!("Size of: ", stringify!(RimeComposition))
    );
    assert_eq!(
        ::std::mem::align_of::<RimeComposition>(),
        8usize,
        concat!("Alignment of ", stringify!(RimeComposition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeComposition>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeComposition),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeComposition>())).cursor_pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeComposition),
            "::",
            stringify!(cursor_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeComposition>())).sel_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeComposition),
            "::",
            stringify!(sel_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeComposition>())).sel_end as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeComposition),
            "::",
            stringify!(sel_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeComposition>())).preedit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeComposition),
            "::",
            stringify!(preedit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_candidate_t {
    pub text: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub reserved: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rime_candidate_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_candidate_t>(),
        24usize,
        concat!("Size of: ", stringify!(rime_candidate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_candidate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_candidate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_candidate_t>())).text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_candidate_t),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_candidate_t>())).comment as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_candidate_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_candidate_t>())).reserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_candidate_t),
            "::",
            stringify!(reserved)
        )
    );
}
pub type RimeCandidate = rime_candidate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RimeMenu {
    pub page_size: ::std::os::raw::c_int,
    pub page_no: ::std::os::raw::c_int,
    pub is_last_page: Bool,
    pub highlighted_candidate_index: ::std::os::raw::c_int,
    pub num_candidates: ::std::os::raw::c_int,
    pub candidates: *mut RimeCandidate,
    pub select_keys: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RimeMenu() {
    assert_eq!(
        ::std::mem::size_of::<RimeMenu>(),
        40usize,
        concat!("Size of: ", stringify!(RimeMenu))
    );
    assert_eq!(
        ::std::mem::align_of::<RimeMenu>(),
        8usize,
        concat!("Alignment of ", stringify!(RimeMenu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeMenu>())).page_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeMenu),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeMenu>())).page_no as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeMenu),
            "::",
            stringify!(page_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeMenu>())).is_last_page as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeMenu),
            "::",
            stringify!(is_last_page)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RimeMenu>())).highlighted_candidate_index as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeMenu),
            "::",
            stringify!(highlighted_candidate_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeMenu>())).num_candidates as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeMenu),
            "::",
            stringify!(num_candidates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeMenu>())).candidates as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeMenu),
            "::",
            stringify!(candidates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RimeMenu>())).select_keys as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RimeMenu),
            "::",
            stringify!(select_keys)
        )
    );
}
#[doc = "  Should be initialized by calling RIME_STRUCT_INIT(Type, var);"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_commit_t {
    pub data_size: ::std::os::raw::c_int,
    pub text: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rime_commit_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_commit_t>(),
        16usize,
        concat!("Size of: ", stringify!(rime_commit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_commit_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_commit_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_commit_t>())).data_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_commit_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_commit_t>())).text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_commit_t),
            "::",
            stringify!(text)
        )
    );
}
#[doc = "  Should be initialized by calling RIME_STRUCT_INIT(Type, var);"]
pub type RimeCommit = rime_commit_t;
#[doc = "  Should be initialized by calling RIME_STRUCT_INIT(Type, var);"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_context_t {
    pub data_size: ::std::os::raw::c_int,
    pub composition: RimeComposition,
    pub menu: RimeMenu,
    pub commit_text_preview: *mut ::std::os::raw::c_char,
    pub select_labels: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rime_context_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_context_t>(),
        88usize,
        concat!("Size of: ", stringify!(rime_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_context_t>())).data_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_context_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_context_t>())).composition as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_context_t),
            "::",
            stringify!(composition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_context_t>())).menu as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_context_t),
            "::",
            stringify!(menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_context_t>())).commit_text_preview as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_context_t),
            "::",
            stringify!(commit_text_preview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_context_t>())).select_labels as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_context_t),
            "::",
            stringify!(select_labels)
        )
    );
}
#[doc = "  Should be initialized by calling RIME_STRUCT_INIT(Type, var);"]
pub type RimeContext = rime_context_t;
#[doc = "  Should be initialized by calling RIME_STRUCT_INIT(Type, var);"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_status_t {
    pub data_size: ::std::os::raw::c_int,
    pub schema_id: *mut ::std::os::raw::c_char,
    pub schema_name: *mut ::std::os::raw::c_char,
    pub is_disabled: Bool,
    pub is_composing: Bool,
    pub is_ascii_mode: Bool,
    pub is_full_shape: Bool,
    pub is_simplified: Bool,
    pub is_traditional: Bool,
    pub is_ascii_punct: Bool,
}
#[test]
fn bindgen_test_layout_rime_status_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_status_t>(),
        56usize,
        concat!("Size of: ", stringify!(rime_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_status_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_status_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).data_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).schema_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(schema_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).schema_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(schema_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).is_disabled as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(is_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).is_composing as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(is_composing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).is_ascii_mode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(is_ascii_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).is_full_shape as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(is_full_shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).is_simplified as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(is_simplified)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).is_traditional as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(is_traditional)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_status_t>())).is_ascii_punct as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_status_t),
            "::",
            stringify!(is_ascii_punct)
        )
    );
}
#[doc = "  Should be initialized by calling RIME_STRUCT_INIT(Type, var);"]
pub type RimeStatus = rime_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_candidate_list_iterator_t {
    pub ptr: *mut ::std::os::raw::c_void,
    pub index: ::std::os::raw::c_int,
    pub candidate: RimeCandidate,
}
#[test]
fn bindgen_test_layout_rime_candidate_list_iterator_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_candidate_list_iterator_t>(),
        40usize,
        concat!("Size of: ", stringify!(rime_candidate_list_iterator_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_candidate_list_iterator_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_candidate_list_iterator_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_candidate_list_iterator_t>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_candidate_list_iterator_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_candidate_list_iterator_t>())).index as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_candidate_list_iterator_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_candidate_list_iterator_t>())).candidate as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_candidate_list_iterator_t),
            "::",
            stringify!(candidate)
        )
    );
}
pub type RimeCandidateListIterator = rime_candidate_list_iterator_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_config_t {
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rime_config_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_config_t>(),
        8usize,
        concat!("Size of: ", stringify!(rime_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_config_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_config_t>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_config_t),
            "::",
            stringify!(ptr)
        )
    );
}
pub type RimeConfig = rime_config_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_config_iterator_t {
    pub list: *mut ::std::os::raw::c_void,
    pub map: *mut ::std::os::raw::c_void,
    pub index: ::std::os::raw::c_int,
    pub key: *const ::std::os::raw::c_char,
    pub path: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rime_config_iterator_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_config_iterator_t>(),
        40usize,
        concat!("Size of: ", stringify!(rime_config_iterator_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_config_iterator_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_config_iterator_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_config_iterator_t>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_config_iterator_t),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_config_iterator_t>())).map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_config_iterator_t),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_config_iterator_t>())).index as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_config_iterator_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_config_iterator_t>())).key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_config_iterator_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_config_iterator_t>())).path as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_config_iterator_t),
            "::",
            stringify!(path)
        )
    );
}
pub type RimeConfigIterator = rime_config_iterator_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_schema_list_item_t {
    pub schema_id: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub reserved: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rime_schema_list_item_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_schema_list_item_t>(),
        24usize,
        concat!("Size of: ", stringify!(rime_schema_list_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_schema_list_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_schema_list_item_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_schema_list_item_t>())).schema_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_schema_list_item_t),
            "::",
            stringify!(schema_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_schema_list_item_t>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_schema_list_item_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_schema_list_item_t>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_schema_list_item_t),
            "::",
            stringify!(reserved)
        )
    );
}
pub type RimeSchemaListItem = rime_schema_list_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_schema_list_t {
    pub size: size_t,
    pub list: *mut RimeSchemaListItem,
}
#[test]
fn bindgen_test_layout_rime_schema_list_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_schema_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(rime_schema_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_schema_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_schema_list_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_schema_list_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_schema_list_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_schema_list_t>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_schema_list_t),
            "::",
            stringify!(list)
        )
    );
}
pub type RimeSchemaList = rime_schema_list_t;
pub type RimeNotificationHandler = ::std::option::Option<
    unsafe extern "C" fn(
        context_object: *mut ::std::os::raw::c_void,
        session_id: RimeSessionId,
        message_type: *const ::std::os::raw::c_char,
        message_value: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    #[doc = "  Call this function before accessing any other API."]
    pub fn RimeSetup(traits: *mut RimeTraits);
}
extern "C" {
    #[doc = "  Pass a C-string constant in the format \"rime.x\""]
    #[doc = "  where 'x' is the name of your application."]
    #[doc = "  Add prefix \"rime.\" to ensure old log files are automatically cleaned."]
    #[doc = "  \\deprecated Use RimeSetup() instead."]
    pub fn RimeSetupLogging(app_name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "! Receive notifications"]
    #[doc = "*!"]
    #[doc = "* - on loading schema:"]
    #[doc = "*   + message_type=\"schema\", message_value=\"luna_pinyin/Luna Pinyin\""]
    #[doc = "* - on changing mode:"]
    #[doc = "*   + message_type=\"option\", message_value=\"ascii_mode\""]
    #[doc = "*   + message_type=\"option\", message_value=\"!ascii_mode\""]
    #[doc = "* - on deployment:"]
    #[doc = "*   + session_id = 0, message_type=\"deploy\", message_value=\"start\""]
    #[doc = "*   + session_id = 0, message_type=\"deploy\", message_value=\"success\""]
    #[doc = "*   + session_id = 0, message_type=\"deploy\", message_value=\"failure\""]
    #[doc = "*"]
    #[doc = "*   handler will be called with context_object as the first parameter"]
    #[doc = "*   every time an event occurs in librime, until RimeFinalize() is called."]
    #[doc = "*   when handler is NULL, notification is disabled."]
    #[doc = "*/"]
    pub fn RimeSetNotificationHandler(
        handler: RimeNotificationHandler,
        context_object: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn RimeInitialize(traits: *mut RimeTraits);
}
extern "C" {
    pub fn RimeFinalize();
}
extern "C" {
    pub fn RimeStartMaintenance(full_check: Bool) -> Bool;
}
extern "C" {
    #[doc = "! \\deprecated Use RimeStartMaintenance(full_check = False) instead."]
    pub fn RimeStartMaintenanceOnWorkspaceChange() -> Bool;
}
extern "C" {
    pub fn RimeIsMaintenancing() -> Bool;
}
extern "C" {
    pub fn RimeJoinMaintenanceThread();
}
extern "C" {
    pub fn RimeDeployerInitialize(traits: *mut RimeTraits);
}
extern "C" {
    pub fn RimePrebuildAllSchemas() -> Bool;
}
extern "C" {
    pub fn RimeDeployWorkspace() -> Bool;
}
extern "C" {
    pub fn RimeDeploySchema(schema_file: *const ::std::os::raw::c_char) -> Bool;
}
extern "C" {
    pub fn RimeDeployConfigFile(
        file_name: *const ::std::os::raw::c_char,
        version_key: *const ::std::os::raw::c_char,
    ) -> Bool;
}
extern "C" {
    pub fn RimeSyncUserData() -> Bool;
}
extern "C" {
    pub fn RimeCreateSession() -> RimeSessionId;
}
extern "C" {
    pub fn RimeFindSession(session_id: RimeSessionId) -> Bool;
}
extern "C" {
    pub fn RimeDestroySession(session_id: RimeSessionId) -> Bool;
}
extern "C" {
    pub fn RimeCleanupStaleSessions();
}
extern "C" {
    pub fn RimeCleanupAllSessions();
}
extern "C" {
    pub fn RimeProcessKey(
        session_id: RimeSessionId,
        keycode: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    #[doc = " return True if there is unread commit text"]
    pub fn RimeCommitComposition(session_id: RimeSessionId) -> Bool;
}
extern "C" {
    pub fn RimeClearComposition(session_id: RimeSessionId);
}
extern "C" {
    pub fn RimeGetCommit(session_id: RimeSessionId, commit: *mut RimeCommit) -> Bool;
}
extern "C" {
    pub fn RimeFreeCommit(commit: *mut RimeCommit) -> Bool;
}
extern "C" {
    pub fn RimeGetContext(session_id: RimeSessionId, context: *mut RimeContext) -> Bool;
}
extern "C" {
    pub fn RimeFreeContext(context: *mut RimeContext) -> Bool;
}
extern "C" {
    pub fn RimeGetStatus(session_id: RimeSessionId, status: *mut RimeStatus) -> Bool;
}
extern "C" {
    pub fn RimeFreeStatus(status: *mut RimeStatus) -> Bool;
}
extern "C" {
    pub fn RimeCandidateListBegin(
        session_id: RimeSessionId,
        iterator: *mut RimeCandidateListIterator,
    ) -> Bool;
}
extern "C" {
    pub fn RimeCandidateListNext(iterator: *mut RimeCandidateListIterator) -> Bool;
}
extern "C" {
    pub fn RimeCandidateListEnd(iterator: *mut RimeCandidateListIterator);
}
extern "C" {
    pub fn RimeCandidateListFromIndex(
        session_id: RimeSessionId,
        iterator: *mut RimeCandidateListIterator,
        index: ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    pub fn RimeSetOption(
        session_id: RimeSessionId,
        option: *const ::std::os::raw::c_char,
        value: Bool,
    );
}
extern "C" {
    pub fn RimeGetOption(session_id: RimeSessionId, option: *const ::std::os::raw::c_char) -> Bool;
}
extern "C" {
    pub fn RimeSetProperty(
        session_id: RimeSessionId,
        prop: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn RimeGetProperty(
        session_id: RimeSessionId,
        prop: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        buffer_size: size_t,
    ) -> Bool;
}
extern "C" {
    pub fn RimeGetSchemaList(schema_list: *mut RimeSchemaList) -> Bool;
}
extern "C" {
    pub fn RimeFreeSchemaList(schema_list: *mut RimeSchemaList);
}
extern "C" {
    pub fn RimeGetCurrentSchema(
        session_id: RimeSessionId,
        schema_id: *mut ::std::os::raw::c_char,
        buffer_size: size_t,
    ) -> Bool;
}
extern "C" {
    pub fn RimeSelectSchema(
        session_id: RimeSessionId,
        schema_id: *const ::std::os::raw::c_char,
    ) -> Bool;
}
extern "C" {
    pub fn RimeSchemaOpen(
        schema_id: *const ::std::os::raw::c_char,
        config: *mut RimeConfig,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigOpen(
        config_id: *const ::std::os::raw::c_char,
        config: *mut RimeConfig,
    ) -> Bool;
}
extern "C" {
    pub fn RimeUserConfigOpen(
        config_id: *const ::std::os::raw::c_char,
        config: *mut RimeConfig,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigClose(config: *mut RimeConfig) -> Bool;
}
extern "C" {
    pub fn RimeConfigInit(config: *mut RimeConfig) -> Bool;
}
extern "C" {
    pub fn RimeConfigLoadString(
        config: *mut RimeConfig,
        yaml: *const ::std::os::raw::c_char,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigGetBool(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut Bool,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigGetInt(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigGetDouble(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut f64,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigGetString(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        buffer_size: size_t,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigGetCString(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RimeConfigSetBool(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: Bool,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigSetInt(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigSetDouble(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: f64,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigSetString(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigGetItem(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut RimeConfig,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigSetItem(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut RimeConfig,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigClear(config: *mut RimeConfig, key: *const ::std::os::raw::c_char) -> Bool;
}
extern "C" {
    pub fn RimeConfigCreateList(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigCreateMap(config: *mut RimeConfig, key: *const ::std::os::raw::c_char)
        -> Bool;
}
extern "C" {
    pub fn RimeConfigListSize(
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn RimeConfigBeginList(
        iterator: *mut RimeConfigIterator,
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigBeginMap(
        iterator: *mut RimeConfigIterator,
        config: *mut RimeConfig,
        key: *const ::std::os::raw::c_char,
    ) -> Bool;
}
extern "C" {
    pub fn RimeConfigNext(iterator: *mut RimeConfigIterator) -> Bool;
}
extern "C" {
    pub fn RimeConfigEnd(iterator: *mut RimeConfigIterator);
}
extern "C" {
    pub fn RimeConfigUpdateSignature(
        config: *mut RimeConfig,
        signer: *const ::std::os::raw::c_char,
    ) -> Bool;
}
extern "C" {
    pub fn RimeSimulateKeySequence(
        session_id: RimeSessionId,
        key_sequence: *const ::std::os::raw::c_char,
    ) -> Bool;
}
#[doc = "  Extend the structure to publish custom data/functions in your specific module"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_custom_api_t {
    pub data_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rime_custom_api_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_custom_api_t>(),
        4usize,
        concat!("Size of: ", stringify!(rime_custom_api_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_custom_api_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rime_custom_api_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_custom_api_t>())).data_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_custom_api_t),
            "::",
            stringify!(data_size)
        )
    );
}
#[doc = "  Extend the structure to publish custom data/functions in your specific module"]
pub type RimeCustomApi = rime_custom_api_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_module_t {
    pub data_size: ::std::os::raw::c_int,
    pub module_name: *const ::std::os::raw::c_char,
    pub initialize: ::std::option::Option<unsafe extern "C" fn()>,
    pub finalize: ::std::option::Option<unsafe extern "C" fn()>,
    pub get_api: ::std::option::Option<unsafe extern "C" fn() -> *mut RimeCustomApi>,
}
#[test]
fn bindgen_test_layout_rime_module_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_module_t>(),
        40usize,
        concat!("Size of: ", stringify!(rime_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_module_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_module_t>())).data_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_module_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_module_t>())).module_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_module_t),
            "::",
            stringify!(module_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_module_t>())).initialize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_module_t),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_module_t>())).finalize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_module_t),
            "::",
            stringify!(finalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_module_t>())).get_api as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_module_t),
            "::",
            stringify!(get_api)
        )
    );
}
pub type RimeModule = rime_module_t;
extern "C" {
    pub fn RimeRegisterModule(module: *mut RimeModule) -> Bool;
}
extern "C" {
    pub fn RimeFindModule(module_name: *const ::std::os::raw::c_char) -> *mut RimeModule;
}
extern "C" {
    #[doc = "! Run a registered task"]
    pub fn RimeRunTask(task_name: *const ::std::os::raw::c_char) -> Bool;
}
extern "C" {
    pub fn RimeGetSharedDataDir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RimeGetUserDataDir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RimeGetSyncDir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RimeGetUserId() -> *const ::std::os::raw::c_char;
}
#[doc = " The API structure"]
#[doc = "  RimeApi is for rime v1.0+"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rime_api_t {
    pub data_size: ::std::os::raw::c_int,
    #[doc = " setup"]
    #[doc = "  Call this function before accessing any other API functions."]
    pub setup: ::std::option::Option<unsafe extern "C" fn(traits: *mut RimeTraits)>,
    #[doc = " Set up the notification callbacks"]
    #[doc = "  Receive notifications"]
    #[doc = "  - on loading schema:"]
    #[doc = "    + message_type=\"schema\", message_value=\"luna_pinyin/Luna Pinyin\""]
    #[doc = "  - on changing mode:"]
    #[doc = "    + message_type=\"option\", message_value=\"ascii_mode\""]
    #[doc = "    + message_type=\"option\", message_value=\"!ascii_mode\""]
    #[doc = "  - on deployment:"]
    #[doc = "    + session_id = 0, message_type=\"deploy\", message_value=\"start\""]
    #[doc = "    + session_id = 0, message_type=\"deploy\", message_value=\"success\""]
    #[doc = "    + session_id = 0, message_type=\"deploy\", message_value=\"failure\""]
    #[doc = ""]
    #[doc = "  handler will be called with context_object as the first parameter"]
    #[doc = "  every time an event occurs in librime, until RimeFinalize() is called."]
    #[doc = "  when handler is NULL, notification is disabled."]
    pub set_notification_handler: ::std::option::Option<
        unsafe extern "C" fn(
            handler: RimeNotificationHandler,
            context_object: *mut ::std::os::raw::c_void,
        ),
    >,
    pub initialize: ::std::option::Option<unsafe extern "C" fn(traits: *mut RimeTraits)>,
    pub finalize: ::std::option::Option<unsafe extern "C" fn()>,
    pub start_maintenance: ::std::option::Option<unsafe extern "C" fn(full_check: Bool) -> Bool>,
    pub is_maintenance_mode: ::std::option::Option<unsafe extern "C" fn() -> Bool>,
    pub join_maintenance_thread: ::std::option::Option<unsafe extern "C" fn()>,
    pub deployer_initialize: ::std::option::Option<unsafe extern "C" fn(traits: *mut RimeTraits)>,
    pub prebuild: ::std::option::Option<unsafe extern "C" fn() -> Bool>,
    pub deploy: ::std::option::Option<unsafe extern "C" fn() -> Bool>,
    pub deploy_schema: ::std::option::Option<
        unsafe extern "C" fn(schema_file: *const ::std::os::raw::c_char) -> Bool,
    >,
    pub deploy_config_file: ::std::option::Option<
        unsafe extern "C" fn(
            file_name: *const ::std::os::raw::c_char,
            version_key: *const ::std::os::raw::c_char,
        ) -> Bool,
    >,
    pub sync_user_data: ::std::option::Option<unsafe extern "C" fn() -> Bool>,
    pub create_session: ::std::option::Option<unsafe extern "C" fn() -> RimeSessionId>,
    pub find_session:
        ::std::option::Option<unsafe extern "C" fn(session_id: RimeSessionId) -> Bool>,
    pub destroy_session:
        ::std::option::Option<unsafe extern "C" fn(session_id: RimeSessionId) -> Bool>,
    pub cleanup_stale_sessions: ::std::option::Option<unsafe extern "C" fn()>,
    pub cleanup_all_sessions: ::std::option::Option<unsafe extern "C" fn()>,
    pub process_key: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            keycode: ::std::os::raw::c_int,
            mask: ::std::os::raw::c_int,
        ) -> Bool,
    >,
    pub commit_composition:
        ::std::option::Option<unsafe extern "C" fn(session_id: RimeSessionId) -> Bool>,
    pub clear_composition: ::std::option::Option<unsafe extern "C" fn(session_id: RimeSessionId)>,
    pub get_commit: ::std::option::Option<
        unsafe extern "C" fn(session_id: RimeSessionId, commit: *mut RimeCommit) -> Bool,
    >,
    pub free_commit: ::std::option::Option<unsafe extern "C" fn(commit: *mut RimeCommit) -> Bool>,
    pub get_context: ::std::option::Option<
        unsafe extern "C" fn(session_id: RimeSessionId, context: *mut RimeContext) -> Bool,
    >,
    pub free_context: ::std::option::Option<unsafe extern "C" fn(ctx: *mut RimeContext) -> Bool>,
    pub get_status: ::std::option::Option<
        unsafe extern "C" fn(session_id: RimeSessionId, status: *mut RimeStatus) -> Bool,
    >,
    pub free_status: ::std::option::Option<unsafe extern "C" fn(status: *mut RimeStatus) -> Bool>,
    pub set_option: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            option: *const ::std::os::raw::c_char,
            value: Bool,
        ),
    >,
    pub get_option: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            option: *const ::std::os::raw::c_char,
        ) -> Bool,
    >,
    pub set_property: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            prop: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            prop: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_char,
            buffer_size: size_t,
        ) -> Bool,
    >,
    pub get_schema_list:
        ::std::option::Option<unsafe extern "C" fn(schema_list: *mut RimeSchemaList) -> Bool>,
    pub free_schema_list:
        ::std::option::Option<unsafe extern "C" fn(schema_list: *mut RimeSchemaList)>,
    pub get_current_schema: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            schema_id: *mut ::std::os::raw::c_char,
            buffer_size: size_t,
        ) -> Bool,
    >,
    pub select_schema: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            schema_id: *const ::std::os::raw::c_char,
        ) -> Bool,
    >,
    pub schema_open: ::std::option::Option<
        unsafe extern "C" fn(
            schema_id: *const ::std::os::raw::c_char,
            config: *mut RimeConfig,
        ) -> Bool,
    >,
    pub config_open: ::std::option::Option<
        unsafe extern "C" fn(
            config_id: *const ::std::os::raw::c_char,
            config: *mut RimeConfig,
        ) -> Bool,
    >,
    pub config_close: ::std::option::Option<unsafe extern "C" fn(config: *mut RimeConfig) -> Bool>,
    pub config_get_bool: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut Bool,
        ) -> Bool,
    >,
    pub config_get_int: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_int,
        ) -> Bool,
    >,
    pub config_get_double: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut f64,
        ) -> Bool,
    >,
    pub config_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_char,
            buffer_size: size_t,
        ) -> Bool,
    >,
    pub config_get_cstring: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub config_update_signature: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            signer: *const ::std::os::raw::c_char,
        ) -> Bool,
    >,
    pub config_begin_map: ::std::option::Option<
        unsafe extern "C" fn(
            iterator: *mut RimeConfigIterator,
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
        ) -> Bool,
    >,
    pub config_next:
        ::std::option::Option<unsafe extern "C" fn(iterator: *mut RimeConfigIterator) -> Bool>,
    pub config_end: ::std::option::Option<unsafe extern "C" fn(iterator: *mut RimeConfigIterator)>,
    pub simulate_key_sequence: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            key_sequence: *const ::std::os::raw::c_char,
        ) -> Bool,
    >,
    pub register_module:
        ::std::option::Option<unsafe extern "C" fn(module: *mut RimeModule) -> Bool>,
    pub find_module: ::std::option::Option<
        unsafe extern "C" fn(module_name: *const ::std::os::raw::c_char) -> *mut RimeModule,
    >,
    pub run_task: ::std::option::Option<
        unsafe extern "C" fn(task_name: *const ::std::os::raw::c_char) -> Bool,
    >,
    pub get_shared_data_dir:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_user_data_dir:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_sync_dir:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_user_id: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_user_data_sync_dir: ::std::option::Option<
        unsafe extern "C" fn(dir: *mut ::std::os::raw::c_char, buffer_size: size_t),
    >,
    #[doc = "! initialize an empty config object"]
    #[doc = "*!"]
    #[doc = "* should call config_close() to free the object"]
    #[doc = "*/"]
    pub config_init: ::std::option::Option<unsafe extern "C" fn(config: *mut RimeConfig) -> Bool>,
    #[doc = "! deserialize config from a yaml string"]
    pub config_load_string: ::std::option::Option<
        unsafe extern "C" fn(config: *mut RimeConfig, yaml: *const ::std::os::raw::c_char) -> Bool,
    >,
    pub config_set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: Bool,
        ) -> Bool,
    >,
    pub config_set_int: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ) -> Bool,
    >,
    pub config_set_double: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: f64,
        ) -> Bool,
    >,
    pub config_set_string: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ) -> Bool,
    >,
    pub config_get_item: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut RimeConfig,
        ) -> Bool,
    >,
    pub config_set_item: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut RimeConfig,
        ) -> Bool,
    >,
    pub config_clear: ::std::option::Option<
        unsafe extern "C" fn(config: *mut RimeConfig, key: *const ::std::os::raw::c_char) -> Bool,
    >,
    pub config_create_list: ::std::option::Option<
        unsafe extern "C" fn(config: *mut RimeConfig, key: *const ::std::os::raw::c_char) -> Bool,
    >,
    pub config_create_map: ::std::option::Option<
        unsafe extern "C" fn(config: *mut RimeConfig, key: *const ::std::os::raw::c_char) -> Bool,
    >,
    pub config_list_size: ::std::option::Option<
        unsafe extern "C" fn(config: *mut RimeConfig, key: *const ::std::os::raw::c_char) -> size_t,
    >,
    pub config_begin_list: ::std::option::Option<
        unsafe extern "C" fn(
            iterator: *mut RimeConfigIterator,
            config: *mut RimeConfig,
            key: *const ::std::os::raw::c_char,
        ) -> Bool,
    >,
    #[doc = "! get raw input"]
    #[doc = "*!"]
    #[doc = "*  NULL is returned if session does not exist."]
    #[doc = "*  the returned pointer to input string will become invalid upon editing."]
    #[doc = "*/"]
    pub get_input: ::std::option::Option<
        unsafe extern "C" fn(session_id: RimeSessionId) -> *const ::std::os::raw::c_char,
    >,
    #[doc = "! caret posistion in terms of raw input"]
    pub get_caret_pos:
        ::std::option::Option<unsafe extern "C" fn(session_id: RimeSessionId) -> size_t>,
    #[doc = "! select a candidate at the given index in candidate list."]
    pub select_candidate: ::std::option::Option<
        unsafe extern "C" fn(session_id: RimeSessionId, index: size_t) -> Bool,
    >,
    #[doc = "! get the version of librime"]
    pub get_version: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    #[doc = "! set caret posistion in terms of raw input"]
    pub set_caret_pos:
        ::std::option::Option<unsafe extern "C" fn(session_id: RimeSessionId, caret_pos: size_t)>,
    #[doc = "! select a candidate from current page."]
    pub select_candidate_on_current_page: ::std::option::Option<
        unsafe extern "C" fn(session_id: RimeSessionId, index: size_t) -> Bool,
    >,
    pub candidate_list_begin: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            iterator: *mut RimeCandidateListIterator,
        ) -> Bool,
    >,
    pub candidate_list_next: ::std::option::Option<
        unsafe extern "C" fn(iterator: *mut RimeCandidateListIterator) -> Bool,
    >,
    pub candidate_list_end:
        ::std::option::Option<unsafe extern "C" fn(iterator: *mut RimeCandidateListIterator)>,
    pub user_config_open: ::std::option::Option<
        unsafe extern "C" fn(
            config_id: *const ::std::os::raw::c_char,
            config: *mut RimeConfig,
        ) -> Bool,
    >,
    pub candidate_list_from_index: ::std::option::Option<
        unsafe extern "C" fn(
            session_id: RimeSessionId,
            iterator: *mut RimeCandidateListIterator,
            index: ::std::os::raw::c_int,
        ) -> Bool,
    >,
}
#[test]
fn bindgen_test_layout_rime_api_t() {
    assert_eq!(
        ::std::mem::size_of::<rime_api_t>(),
        648usize,
        concat!("Size of: ", stringify!(rime_api_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rime_api_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rime_api_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).data_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).setup as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_api_t>())).set_notification_handler as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(set_notification_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).initialize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).finalize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(finalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).start_maintenance as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(start_maintenance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).is_maintenance_mode as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(is_maintenance_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_api_t>())).join_maintenance_thread as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(join_maintenance_thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).deployer_initialize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(deployer_initialize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).prebuild as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(prebuild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).deploy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(deploy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).deploy_schema as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(deploy_schema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).deploy_config_file as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(deploy_config_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).sync_user_data as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(sync_user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).create_session as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(create_session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).find_session as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(find_session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).destroy_session as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(destroy_session)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_api_t>())).cleanup_stale_sessions as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(cleanup_stale_sessions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).cleanup_all_sessions as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(cleanup_all_sessions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).process_key as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(process_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).commit_composition as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(commit_composition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).clear_composition as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(clear_composition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_commit as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_commit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).free_commit as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(free_commit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_context as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).free_context as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(free_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_status as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).free_status as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(free_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).set_option as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(set_option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_option as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).set_property as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(set_property)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_property as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_property)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_schema_list as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_schema_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).free_schema_list as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(free_schema_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_current_schema as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_current_schema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).select_schema as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(select_schema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).schema_open as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(schema_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_open as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_close as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_get_bool as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_get_int as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_get_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_get_double as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_get_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_get_string as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_get_cstring as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_get_cstring)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_api_t>())).config_update_signature as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_update_signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_begin_map as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_begin_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_next as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_end as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_api_t>())).simulate_key_sequence as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(simulate_key_sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).register_module as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(register_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).find_module as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(find_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).run_task as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(run_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_shared_data_dir as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_shared_data_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_user_data_dir as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_user_data_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_sync_dir as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_sync_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_user_id as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_user_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_api_t>())).get_user_data_sync_dir as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_user_data_sync_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_init as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_load_string as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_load_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_set_bool as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_set_int as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_set_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_set_double as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_set_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_set_string as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_get_item as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_get_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_set_item as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_set_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_clear as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_create_list as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_create_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_create_map as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_create_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_list_size as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_list_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).config_begin_list as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(config_begin_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_input as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_caret_pos as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_caret_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).select_candidate as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(select_candidate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).get_version as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(get_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).set_caret_pos as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(set_caret_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_api_t>())).select_candidate_on_current_page as *const _
                as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(select_candidate_on_current_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).candidate_list_begin as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(candidate_list_begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).candidate_list_next as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(candidate_list_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).candidate_list_end as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(candidate_list_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rime_api_t>())).user_config_open as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(user_config_open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rime_api_t>())).candidate_list_from_index as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(rime_api_t),
            "::",
            stringify!(candidate_list_from_index)
        )
    );
}
#[doc = " The API structure"]
#[doc = "  RimeApi is for rime v1.0+"]
pub type RimeApi = rime_api_t;
extern "C" {
    #[doc = "! API entry"]
    #[doc = "*!"]
    #[doc = "*  Acquire the version controlled RimeApi structure."]
    #[doc = "*/"]
    pub fn rime_get_api() -> *mut RimeApi;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
